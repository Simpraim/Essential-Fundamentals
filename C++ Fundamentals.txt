
Purpose: Accumulated notes from CS1210/1220

**Basic Program Structure (No header files) **

#include <some_library>

using namespace std;

int main(){

//Variable declarations
//Commands; expressions; calculations; evaluations

return 0;
}
-EACH LINE OF CODE THAT IS TO BE COMPILED (not including inclusions, comments) MUST END IN A SEMI COLON.
//Some changes
_____________________________________________________________________________________________________________________________________________________________________________________________

**Comments**
-Comments are for the user to read. The compiler does not recognize comments
-Commenting strategies
	-Single line comments are started with a "//" and end once a new line starts
	-Multi-line comments are started with "/*" and ended with "*/".  The can be shorter than a line or span multiple lines.

_____________________________________________________________________________________________________________________________________________________________________________________________



**Variables**
 Definition - Objects that stores data
-Syntax - data_type variableName; or data_type variableName = intial_value;
-Variable have a data type they can hold
	-Examples: int (1) 
                   float/double (1.0) 
                   bool (true/false) 
                   char ('a'/ '4')
                   *string ("This is a string")*
        -String are not a default variable type. Must #include <iostream> or <string>
-Variables are case sensitive
	-Example: int a; is different from int A; 
-Normal variable use camel case
	-Example: myVariable; yourVariable; myNumber; yourNumber;
-Variables should't be keywords
	-List of keywords: https://en.cppreference.com/w/cpp/keyword
-The assignment operator "=" is used to assign a value to a variable;

-int declaration: int a; or int a = 4;
-double/float declaration: double b; or double b = 4.0; (you can substitute double for float)
-bool declaration: bool isCorrect; or bool isCorrect = true;
-char delclaration: char c; or char c = 'C'; (char can only hold a single value, however you can use a character array to create a string of characters, use single quotes)
-string declaration: string d; or string d = "This is my string" (Strings have special functions that can do different things)

_____________________________________________________________________________________________________________________________________________________________________________________________

**Standard inputting/outputting**
-Standard input is typically the keyboard
-Standard output is typically a monitor screen
-To input/output:
	-Step 1: #include<iostream>
	-Step 2: Output: cout << variable; or cout <<"Some text"; or cout << variable << " " << "Some text";
	-Step 2a: Input: cin >> variable; 
	-Hint: When running your first program, you might want to output a prompt asking for input, then take in the input
	-Hint: cout << endl; is a newline character. It is the same as pressing enter in a text editor.  
	-Hint: you can output multiple things in one line: cout << a << b << c << end;

_____________________________________________________________________________________________________________________________________________________________________________________________

**Boolean Variables and other operators**
-Can either be true or false;
-Boolean Variable Declaration: bool isAwake = true; or bool isAwake = false;
-Boolean operators can help with conditional statements and loops
- Logical "and": &&
-Logical "or": ||
Less than operator: <
Greater than operator: >
Less than or equal to: =>
Greater than or equal to: =<
Equality operator: ==
Inequality operator: !=
_____________________________________________________________________________________________________________________________________________________________________________________________
**C++ Style Strings**
-These strings are a class specifically made for c++
-They differ for C-Style strings becuase they are not stored as character arrays
-Declaring a string object:
	-string variableName; or string variableName = "My string";
-You can concatenate or add strings using the "+" operator:
string a ="My";
string b = " String";
string c = a + b;
cout << c;
//the output would be: My String

*Formatting Tip*
using the 'endl' keyword impliments a newline character.
Example: 
cout << a << endl << b << c;
//Output would be:
My 
StringMy String




_____________________________________________________________________________________________________________________________________________________________________________________________

**If statements**
-A block of code that only gets entered if the conditions are met
-Syntax:
if (condition){
//Some code
//optional return value
}

-You can have multiple if statements for mutiple condtions using "else if"
-If no other condition is met, the final statement "else" can be used with no coditions
-Example:
int a = 5;

if (a == 3){
return true;
}
else if (a == 5){
return false;
}

else{
return true;
}

_____________________________________________________________________________________________________________________________________________________________________________________________

**Loops**
-2 Common Loop types: While loops and for loops
-While Loops syntax:

while (boolean expression){
//action
}

EXAMPLE:
int numStudents = 1;
while (numStudents != 5){
  cout << "Welcome"; 
  numStudents++;
}
//This loop will print "Welcome" until numStudents == 5.

-For Loop syntax:

for (init expression; test expression; mod expression){
//action
}

EXAMPLE:
 for (int i = 0; i < 5; i++){
cout << i;
}
//This will print out numbers 1 -4
 
_____________________________________________________________________________________________________________________________________________________________________________________________

**A simple test program**
Step 1: Open a text editor or IDE and name the file "test.cpp"
Step 2: Write a program that asks for a name, age, GPA, and favorite letter.
Step 3: Output the user's profile. It should look like this: name - Jason, age - 15, GPA - 3.4, favorite letter - g;

Solution:
#include <iostream>
using namespace std;

int main(){
    int age;
    string name;
    char favLetter;
    double gpa;
    cout << "Please enter a name: " << endl;
    cin >> name;
    cout << "Please enter your age: " << endl;
    cin >> age;
    cout << "Please enter your favorite letter: " << endl;
    cin >> favLetter;
    cout << "Please enter your GPA: " << endl;
    cin >> gpa;

    cout << "Name: " << name <<" Age: " << age << " Favorite letter: " << favLetter << " GPA: " << gpa;

    return 0;

}

_____________________________________________________________________________________________________________________________________________________________________________________________

**Compiling Code**
-To run your code, you have to compile it into a executable file
-To compile (in terminal/command prompt/Powershell) :
	-gcc test.cpp
	-This will result in the creation of a file called a.exe or a.out (Linux systems)
	-To run it, just type a.out or a.exe
	-If you want the executable to have a specific name:
		-gcc test.cpp -o desired name
_____________________________________________________________________________________________________________________________________________________________________________________________
**User Defined Functions**
-Purpose: Sometimes when coding, you will find yourself repeating the same process over and over again.  To conserve space in code we create function.
-Functions in the main.cpp code:
//Function definition
//int main() code with function call
//function implimentation

-The function definition is above the main code.  This is so that when the complier compiles the code, it sees the definition, then the call in int main().  If it sees the function call 
first it will output and error.
-Syntax for Function defitition:
return_type functionName(parameters*){}
*sometimes parameters are not needed

-The function implimentation is usually combined with the definition at the top or is below the int main() code.
-Syntax for function implimentation:
return_type functionName(parameters){
//code  
return return_type;
}

-When you call a function with your parameters, you are taking your variables and manipulating them using the code in the function.
-Syntax for function call #1:
functionName(your parameters);

-Syntax for function call #2:
variableName = functionName(yourparameters);
_____________________________________________________________________________________________________________________________________________________________________________________________

